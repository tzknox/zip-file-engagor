app Engagor {
  wasp: {
    version: "^0.13.0"
  },
  title: "Engagor",
  client: {
    rootComponent: import { Layout } from "@src/Layout.jsx"
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int              @id @default(autoincrement())
    accounts TwitterAccount[]
psl=}

entity TwitterAccount {=psl
    id         Int          @id @default(autoincrement())
    username   String
    password   String
    user       User         @relation(fields: [userId], references: [id])
    userId     Int
    Engagement Engagement[]
psl=}

entity Engagement {=psl
    id        Int            @id @default(autoincrement())
    tweetLink String
    account   TwitterAccount @relation(fields: [accountId], references: [id])
    accountId Int
psl=}

action addTwitterAccount {
  fn: import { addTwitterAccount } from "@src/actions.js",
  entities: [TwitterAccount]
}

action engagePost {
  fn: import { engagePost } from "@src/actions.js",
  entities: [Engagement, TwitterAccount]
}

query getAccounts {
  fn: import { getAccounts } from "@src/queries.js",
  entities: [User, TwitterAccount]
}

query getEngagements {
  fn: import { getEngagements } from "@src/queries.js",
  entities: [Engagement]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import DashboardPage from "@src/pages/Dashboard.jsx",
  authRequired: true
}

route AccountRoute { path: "/account/:accountId", to: AccountPage }
page AccountPage {
  component: import AccountPage from "@src/pages/Account.jsx",
  authRequired: true
}